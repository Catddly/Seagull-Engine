#version 460

// defined work group size
layout (local_size_x = 16) in; // 16 elements at a time

layout (binding = 0) uniform CullUBO
{
    vec4  frustum[6];
    vec3  viewPos;
    float pad;
    uint  numObjects;
    uint  numDrawCalls;
} cullUbo;

struct InstanceData
{
    uint objectId;
};

layout(binding = 1, std430) writeonly buffer InstanceBuffer
{
    InstanceData objects[];
} instanceBuffer;

struct InstanceOutputData
{
    int testIndex;
    uint objectId;
};

layout(binding = 2, std430) readonly buffer InstanceOutputBuffer
{
    InstanceOutputData datas[];
} instanceOutput;

layout(binding = 3, std430) readonly buffer InstanceSumTable
{
    uint datas[];
} instanceSumTable;

void main()
{
    // here, gID represents meshId. (i.e. drawcall id)

    // grab global ID
	uint gID = gl_GlobalInvocationID.x;

    if (gID == 0) // skip the first draw call (the skybox)
        return;

    if (gID < cullUbo.numDrawCalls)
    {
        uint rangeBegin = instanceSumTable.datas[gID - 1];
        uint rangeEnd = instanceSumTable.datas[gID];

        if (rangeBegin == rangeEnd)
            return;

        uint index = 0;
        for (uint i = rangeBegin; i < rangeEnd; ++i)
        {
            int testIndex = instanceOutput.datas[i].testIndex;
            if (testIndex != -1) // it is not been cull out by the frustum
            {
                uint objectId = instanceOutput.datas[i].objectId;

                instanceBuffer.objects[index + rangeBegin].objectId = objectId; // set the correct objectId to instance buffer
                ++index;
            }
        }
    }
}