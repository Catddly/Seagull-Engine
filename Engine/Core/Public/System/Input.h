#pragma once

#include "Core/Config.h"
#include "Base/BasicTypes.h"

#ifndef WIN32_LEAN_AND_MEAN
#	define WIN32_LEAN_AND_MEAN
#	include <windows.h>
#endif

#include "Stl/vector.h"
#include <eastl/vector_multiset.h>
#include <eastl/utility.h>
#include <eastl/array.h>
#include <eastl/map.h>

#include "Math/MathBasic.h"

namespace SG
{

	enum EKeyCode
	{
		KeyCode_Back = 0,
		KeyCode_Tab,
		KeyCode_Clear,
		KeyCode_Enter,
		KeyCode_LeftShift,
		KeyCode_RightShift,
		KeyCode_Shift,
		KeyCode_LeftControl,
		KeyCode_RightControl,
		KeyCode_Control,
		KeyCode_LeftAlt,
		KeyCode_RightAlt,
		KeyCode_Alt,
		KeyCode_Apostrophe,
		KeyCode_Comma,
		KeyCode_LeftBracket,
		KeyCode_RightBracket,
		KeyCode_Slash,
		KeyCode_BackSlash,
		KeyCode_Semicolon,
		KeyCode_Period,
		KeyCode_Plus,  //! + in main keyboard
		KeyCode_Minus, //! - in main keyboard
		KeyCode_GraveAccent, //! ` in main keyboard
		KeyCode_BrowserBack,
		KeyCode_BrowserForward,
		KeyCode_BrowserRefresh,
		KeyCode_BrowserStop,
		KeyCode_BrowserSearch,
		KeyCode_BrowserFavorites,
		KeyCode_BrowserHome,
		KeyCode_Pause,
		KeyCode_Capital,
		KeyCode_Escape,
		KeyCode_Space,
		KeyCode_PageUp,
		KeyCode_PageDown,
		KeyCode_End,
		KeyCode_Home,
		KeyCode_Left,
		KeyCode_Up,
		KeyCode_Right,
		KeyCode_Down,
		KeyCode_Select,
		KeyCode_Print,
		KeyCode_Execute,
		KeyCode_SnapShot,
		KeyCode_Insert,
		KeyCode_Delete,
		KeyCode_Help,
		KeyCode_LeftWin,
		KeyCode_RightWin,
		KeyCode_Apps,
		KeyCode_Sleep,
		KeyCode_ScrollLock,
		KeyCode_VolumnMute,
		KeyCode_VolumnUp,
		KeyCode_VolumnDown,
		/// numpad
		KeyCode_Numpad0,
		KeyCode_Numpad1,
		KeyCode_Numpad2,
		KeyCode_Numpad3,
		KeyCode_Numpad4,
		KeyCode_Numpad5,
		KeyCode_Numpad6,
		KeyCode_Numpad7,
		KeyCode_Numpad8,
		KeyCode_Numpad9,
		KeyCode_Multiply, //! * in numpad
		KeyCode_Add, //! + in numpad
		KeyCode_Separator,
		KeyCode_Subtract, //! - in numpad
		KeyCode_Decimal, //! . in numpad
		KeyCode_Divide, //! '/' in numpad
		KeyCode_NumpadEnter,
		KeyCode_NumLock,
		/// Numbers
		KeyCode_0,
		KeyCode_1,
		KeyCode_2,
		KeyCode_3,
		KeyCode_4,
		KeyCode_5,
		KeyCode_6,
		KeyCode_7,
		KeyCode_8,
		KeyCode_9,
		/// letters
		KeyCode_A,
		KeyCode_B,
		KeyCode_C,
		KeyCode_D,
		KeyCode_E,
		KeyCode_F,
		KeyCode_G,
		KeyCode_H,
		KeyCode_I,
		KeyCode_J,
		KeyCode_K,
		KeyCode_L,
		KeyCode_M,
		KeyCode_N,
		KeyCode_O,
		KeyCode_P,
		KeyCode_Q,
		KeyCode_R,
		KeyCode_S,
		KeyCode_T,
		KeyCode_U,
		KeyCode_V,
		KeyCode_W,
		KeyCode_X,
		KeyCode_Y,
		KeyCode_Z,
		/// F-keys
		KeyCode_F1,
		KeyCode_F2,
		KeyCode_F3,
		KeyCode_F4,
		KeyCode_F5,
		KeyCode_F6,
		KeyCode_F7,
		KeyCode_F8,
		KeyCode_F9,
		KeyCode_F10,
		KeyCode_F11,
		KeyCode_F12,
		KeyCode_F13,
		KeyCode_F14,
		KeyCode_F15,
		KeyCode_F16,
		KeyCode_F17,
		KeyCode_F18,
		KeyCode_F19,
		KeyCode_F20,
		KeyCode_F21,
		KeyCode_F22,
		KeyCode_F23,
		KeyCode_F24,
		/// Mouse key
		KeyCode_MouseLeft,
		KeyCode_MouseRight,
		KeyCode_MouseMiddle,
		KeyCode_MouseScrollUp,
		KeyCode_MouseScrollDown,
		KeyCode_MouseScrollLeft,
		KeyCode_MouseScrollRight,
		KeyCode_Mouse5,  //!< side-key 0
		KeyCode_Mouse6,  //!< side-key 1
		KeyCode_Mouse7,  //!< side-key 2

		KEYCODE_COUNT,
		KeyCode_Null,
	};

#ifdef SG_PLATFORM_WINDOWS
	static int gKeyCodeToPlatformMap[EKeyCode::KEYCODE_COUNT] = {
	VK_BACK,
	VK_TAB,
	VK_CLEAR,
	VK_RETURN,
	VK_LSHIFT,
	VK_RSHIFT,
	VK_SHIFT,
	VK_LCONTROL,
	VK_RCONTROL,
	VK_CONTROL,
	VK_LMENU,
	VK_RMENU,
	VK_MENU,
	VK_OEM_7,
	VK_OEM_COMMA,
	VK_OEM_4,
	VK_OEM_6,
	VK_OEM_2,
	VK_OEM_5,
	VK_OEM_1,
	VK_OEM_PERIOD,
	VK_OEM_PLUS,
	VK_OEM_MINUS,
	VK_OEM_3,
	VK_BROWSER_BACK,
	VK_BROWSER_FORWARD,
	VK_BROWSER_REFRESH,
	VK_BROWSER_STOP,
	VK_BROWSER_SEARCH,
	VK_BROWSER_FAVORITES,
	VK_BROWSER_HOME,
	VK_PAUSE,
	VK_CAPITAL,
	VK_ESCAPE,
	VK_SPACE,
	VK_PRIOR,
	VK_NEXT,
	VK_END,
	VK_HOME,
	VK_LEFT,
	VK_UP,
	VK_RIGHT,
	VK_DOWN,
	VK_SELECT,
	VK_PRINT,
	VK_EXECUTE,
	VK_SNAPSHOT,
	VK_INSERT,
	VK_DELETE,
	VK_HELP,
	VK_LWIN,
	VK_RWIN,
	VK_APPS,
	VK_SLEEP,
	VK_SCROLL,
	VK_VOLUME_MUTE,
	VK_VOLUME_UP,
	VK_VOLUME_DOWN,
	VK_NUMPAD0,
	VK_NUMPAD1,
	VK_NUMPAD2,
	VK_NUMPAD3,
	VK_NUMPAD4,
	VK_NUMPAD5,
	VK_NUMPAD6,
	VK_NUMPAD7,
	VK_NUMPAD8,
	VK_NUMPAD9,
	VK_MULTIPLY,
	VK_ADD,
	VK_SEPARATOR,
	VK_SUBTRACT,
	VK_DECIMAL,
	VK_DIVIDE,
	VK_RETURN,
	VK_NUMLOCK,
	0x30,
	0x31,
	0x32,
	0x33,
	0x34,
	0x35,
	0x36,
	0x37,
	0x38,
	0x39,
	0x41,
	0x42,
	0x43,
	0x44,
	0x45,
	0x46,
	0x47,
	0x48,
	0x49,
	0x4A,
	0x4B,
	0x4C,
	0x4D,
	0x4E,
	0x4F,
	0x50,
	0x51,
	0x52,
	0x53,
	0x54,
	0x55,
	0x56,
	0x57,
	0x58,
	0x59,
	0x5A,
	VK_F1,
	VK_F2,
	VK_F3,
	VK_F4,
	VK_F5,
	VK_F6,
	VK_F7,
	VK_F8,
	VK_F9,
	VK_F10,
	VK_F11,
	VK_F12,
	VK_F13,
	VK_F14,
	VK_F15,
	VK_F16,
	VK_F17,
	VK_F18,
	VK_F19,
	VK_F20,
	VK_F21,
	VK_F22,
	VK_F23,
	VK_F24,
	};

	static EKeyCode gPlatformToKeyCodeMap[255] = {
		KeyCode_Null,
		KeyCode_MouseLeft,
		KeyCode_MouseRight,
		KeyCode_Null,
		KeyCode_MouseMiddle,
		KeyCode_Mouse5,
		KeyCode_Mouse6,
		KeyCode_Null,
		KeyCode_Back,
		KeyCode_Tab,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Clear,
		KeyCode_Enter,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Shift,
		KeyCode_Control,
		KeyCode_Alt,
		KeyCode_Pause,
		KeyCode_Capital,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Escape,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Space,
		KeyCode_PageUp,
		KeyCode_PageDown,
		KeyCode_End,
		KeyCode_Home,
		KeyCode_Left,
		KeyCode_Up,
		KeyCode_Right,
		KeyCode_Down,
		KeyCode_Select,
		KeyCode_Print,
		KeyCode_Execute,
		KeyCode_SnapShot,
		KeyCode_Insert,
		KeyCode_Delete,
		KeyCode_Help,
		KeyCode_0,
		KeyCode_1,
		KeyCode_2,
		KeyCode_3,
		KeyCode_4,
		KeyCode_5,
		KeyCode_6,
		KeyCode_7,
		KeyCode_8,
		KeyCode_9,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_A,
		KeyCode_B,
		KeyCode_C,
		KeyCode_D,
		KeyCode_E,
		KeyCode_F,
		KeyCode_G,
		KeyCode_H,
		KeyCode_I,
		KeyCode_J,
		KeyCode_K,
		KeyCode_L,
		KeyCode_M,
		KeyCode_N,
		KeyCode_O,
		KeyCode_P,
		KeyCode_Q,
		KeyCode_R,
		KeyCode_S,
		KeyCode_T,
		KeyCode_U,
		KeyCode_V,
		KeyCode_W,
		KeyCode_X,
		KeyCode_Y,
		KeyCode_Z,
		KeyCode_LeftWin,
		KeyCode_RightWin,
		KeyCode_Apps,
		KeyCode_Null,
		KeyCode_Sleep,
		KeyCode_Numpad0,
		KeyCode_Numpad1,
		KeyCode_Numpad2,
		KeyCode_Numpad3,
		KeyCode_Numpad4,
		KeyCode_Numpad5,
		KeyCode_Numpad6,
		KeyCode_Numpad7,
		KeyCode_Numpad8,
		KeyCode_Numpad9,
		KeyCode_Multiply,
		KeyCode_Add,
		KeyCode_Separator,
		KeyCode_Subtract,
		KeyCode_Decimal,
		KeyCode_Divide,
		KeyCode_F1,
		KeyCode_F2,
		KeyCode_F3,
		KeyCode_F4,
		KeyCode_F5,
		KeyCode_F6,
		KeyCode_F7,
		KeyCode_F8,
		KeyCode_F9,
		KeyCode_F10,
		KeyCode_F11,
		KeyCode_F12,
		KeyCode_F13,
		KeyCode_F14,
		KeyCode_F15,
		KeyCode_F16,
		KeyCode_F17,
		KeyCode_F18,
		KeyCode_F19,
		KeyCode_F20,
		KeyCode_F21,
		KeyCode_F22,
		KeyCode_F23,
		KeyCode_F24,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_NumpadEnter, // Unassigned WIN32 keycode
		KeyCode_NumLock,
		KeyCode_ScrollLock,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_LeftShift,
		KeyCode_RightShift,
		KeyCode_LeftControl,
		KeyCode_RightControl,
		KeyCode_LeftAlt,
		KeyCode_RightAlt,
		KeyCode_BrowserBack,
		KeyCode_BrowserForward,
		KeyCode_BrowserRefresh,
		KeyCode_BrowserStop,
		KeyCode_BrowserSearch,
		KeyCode_BrowserFavorites,
		KeyCode_BrowserHome,
		KeyCode_VolumnMute,
		KeyCode_VolumnDown,
		KeyCode_VolumnUp,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Semicolon,
		KeyCode_Plus,
		KeyCode_Comma,
		KeyCode_Minus,
		KeyCode_Period,
		KeyCode_Slash,
		KeyCode_GraveAccent,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_LeftBracket,
		KeyCode_BackSlash,
		KeyCode_RightBracket,
		KeyCode_Apostrophe, // VK_OEM_7
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null,
		KeyCode_Null
	};
#endif

	enum class EKeyState
	{
		ePressed,
		eHold,
		eRelease,
		eNull,
	};

	//! Defined the update sequence of the listener,
	//! the more this value is, the latter this listener update.
	enum class EListenerPriority
	{
		eLevel0 = 0,
		eLevel1,
		eLevel2,
		eLevel3,
		eLevel4,
		eLevel5,
		eLevel6,
		eLevel7,
		eLevel8,
		eLevel9,
	};

	//! Observer design pattern, can be register by any class which inherits this class.
	interface SG_CORE_API IInputListener
	{
		virtual ~IInputListener() = default;

		//! Call when system received any input.
		//! @param (keycode) Which key is changing.
		//! @param (keyState) Which state it is.
		//! @return If you want to propagate this event.
		virtual bool OnKeyInputUpdate(EKeyCode keycode, EKeyState keyState) { return true; }
		virtual bool OnMouseMoveInputUpdate(int xPos, int yPos, int deltaXPos, int deltaYPos) { return true; }
		virtual bool OnMouseWheelInputUpdate(int direction) { return true; }
		virtual bool OnCharInput(Char c) { return true; }
		virtual bool OnWideCharInput(WChar c) { return true; }
	};

	struct ListenerPriorityComparer
	{
		SG_INLINE bool operator()(const eastl::pair<EListenerPriority, IInputListener*>& lhs,
			const eastl::pair<EListenerPriority, IInputListener*>& rhs)
		{
			return static_cast<UInt32>(lhs.first) < static_cast<UInt32>(rhs.first);
		}
	};

	class Input
	{
	public:
		SG_CORE_API static void RegisterListener(EListenerPriority priority, IInputListener* pListener);
		SG_CORE_API static void MuteListener(IInputListener* pListener);
		SG_CORE_API static void RemoveListener(IInputListener* pListener);

		SG_CORE_API static bool IsKeyPressed(EKeyCode keycode);

		SG_CORE_API static void SetKeyHoldThreshold(float threshold);

		SG_CORE_API static void ForceReleaseAllEvent();
	private:
		friend class System;
		static void OnInit();
		static void OnShutdown();

		static void OnUpdate(float deltaTime);
		static void ReleaseAllEvent();
	private:
#ifdef SG_PLATFORM_WINDOWS
		friend static LRESULT CALLBACK _WinProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
#endif
		static void OnSystemKeyInputEvent(EKeyCode keycode, bool bPressed);
		static void OnSystemMouseMoveInputEvent(int xPos, int yPos);
		static void OnSystemMouseWheelInputEvent(int direction);
		static void OnSystemCharInput(Char c);
		static void OnSystemWideCharInput(WChar wc);
	private:
		typedef eastl::vector_multiset<eastl::pair<EListenerPriority, IInputListener*>, ListenerPriorityComparer> ListenerContainer;
		static ListenerContainer mpListeners;

		static Vector2i mPrevFrameMousePos;
		static float    mKeyHoldThresHold;
		static eastl::map<EKeyCode, float> mKeyElapsedTimeMap;
		static bool mKeyStatusMap[KEYCODE_COUNT];
		static bool mbPrevFocusStatus;
		static bool mbForceReleaseAllEvent;
	};

}