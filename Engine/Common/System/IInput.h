#pragma once

#include "Common/Config.h"
#include "Common/Base/BasicTypes.h"

#ifdef SG_PLATFORM_WINDOWS
#	include <windows.h>
#endif

namespace SG
{

	enum EKeyCode
	{
		eBack = 0,
		eTab,
		eClear,
		eReturn,
		eLeftShift,
		eRightShift,
		eShift,
		eLeftControl,
		eRightControl,
		eControl,
		eLeftMenu,
		eRightMenu,
		eMenu,
		eBrowserBack,
		eBrowserForward,
		eBrowserRefresh,
		eBrowserStop,
		eBrowserSearch,
		eBrowserFavorites,
		eBrowserHome,
		ePause,
		eCapital,
		eEscape,
		eSpace,
		ePageUp,
		ePageDown,
		eEnd,
		eHome,
		eLeft,
		eUp,
		eRight,
		eDown,
		eSelect,
		ePrint,
		eExecute,
		eSnapShot,
		eInsert,
		eDelete,
		eHelp,
		eLeftWin,
		eRightWin,
		eApps,
		eSleep,
		eScrollLock,
		eVolumnMute,
		eVolumnUp,
		eVolumnDown,
		/// numpad
		eNumpad0,
		eNumpad1,
		eNumpad2,
		eNumpad3,
		eNumpad4,
		eNumpad5,
		eNumpad6,
		eNumpad7,
		eNumpad8,
		eNumpad9,
		eMultiply,
		eAdd,
		eSeparator,
		eSubtract,
		eDecimal,
		eDivide,
		eNumLock,
		/// Numbers
		e0,
		e1,
		e2,
		e3,
		e4,
		e5,
		e6,
		e7,
		e8,
		e9,
		/// letters
		eA,
		eB,
		eC,
		eD,
		eE,
		eF,
		eG,
		eH,
		eI,
		eJ,
		eK,
		eL,
		eM,
		eN,
		eO,
		eP,
		eQ,
		eR,
		eS,
		eT,
		eU,
		eV,
		eW,
		eX,
		eY,
		eZ,
		/// F-keys
		eF1,
		eF2,
		eF3,
		eF4,
		eF5,
		eF6,
		eF7,
		eF8,
		eF9,
		eF10,
		eF11,
		eF12,
		eF13,
		eF14,
		eF15,
		eF16,
		eF17,
		eF18,
		eF19,
		eF20,
		eF21,
		eF22,
		eF23,
		eF24,
		/// Mouse key
		eMouseLeft,
		eMouseRight,
		eMouseMiddle,
		eMouseScrollUp,
		eMouseScrollDown,
		eMouseScrollLeft,
		eMouseScrollRight,
		eMouse5,  //!< side-key 0
		eMouse6,  //!< side-key 1
		eMouse7,  //!< side-key 2

		KEYCODE_COUNT,
		eNull,
	};

#ifdef SG_PLATFORM_WINDOWS
	static int gKeyCodeToPlatformMap[EKeyCode::KEYCODE_COUNT] = {
	VK_BACK,
	VK_TAB,
	VK_CLEAR,
	VK_RETURN,
	VK_LSHIFT,
	VK_RSHIFT,
	VK_SHIFT,
	VK_LCONTROL,
	VK_RCONTROL,
	VK_CONTROL,
	VK_LMENU,
	VK_RMENU,
	VK_MENU,
	VK_BROWSER_BACK,
	VK_BROWSER_FORWARD,
	VK_BROWSER_REFRESH,
	VK_BROWSER_STOP,
	VK_BROWSER_SEARCH,
	VK_BROWSER_FAVORITES,
	VK_BROWSER_HOME,
	VK_PAUSE,
	VK_CAPITAL,
	VK_ESCAPE,
	VK_SPACE,
	VK_PRIOR,
	VK_NEXT,
	VK_END,
	VK_HOME,
	VK_LEFT,
	VK_UP,
	VK_RIGHT,
	VK_DOWN,
	VK_SELECT,
	VK_PRINT,
	VK_EXECUTE,
	VK_SNAPSHOT,
	VK_INSERT,
	VK_DELETE,
	VK_HELP,
	VK_LWIN,
	VK_RWIN,
	VK_APPS,
	VK_SLEEP,
	VK_SCROLL,
	VK_VOLUME_MUTE,
	VK_VOLUME_UP,
	VK_VOLUME_DOWN,
	VK_NUMPAD0,
	VK_NUMPAD1,
	VK_NUMPAD2,
	VK_NUMPAD3,
	VK_NUMPAD4,
	VK_NUMPAD5,
	VK_NUMPAD6,
	VK_NUMPAD7,
	VK_NUMPAD8,
	VK_NUMPAD9,
	VK_MULTIPLY,
	VK_ADD,
	VK_SEPARATOR,
	VK_SUBTRACT,
	VK_DECIMAL,
	VK_DIVIDE,
	VK_NUMLOCK,
	0x30,
	0x31,
	0x32,
	0x33,
	0x34,
	0x35,
	0x36,
	0x37,
	0x38,
	0x39,
	0x41,
	0x42,
	0x43,
	0x44,
	0x45,
	0x46,
	0x47,
	0x48,
	0x49,
	0x4A,
	0x4B,
	0x4C,
	0x4D,
	0x4E,
	0x4F,
	0x50,
	0x51,
	0x52,
	0x53,
	0x54,
	0x55,
	0x56,
	0x57,
	0x58,
	0x59,
	0x5A,
	VK_F1,
	VK_F2,
	VK_F3,
	VK_F4,
	VK_F5,
	VK_F6,
	VK_F7,
	VK_F8,
	VK_F9,
	VK_F10,
	VK_F11,
	VK_F12,
	VK_F13,
	VK_F14,
	VK_F15,
	VK_F16,
	VK_F17,
	VK_F18,
	VK_F19,
	VK_F20,
	VK_F21,
	VK_F22,
	VK_F23,
	VK_F24,
	};

	static EKeyCode gPlatformToKeyCodeMap[255] = {
		EKeyCode::eNull,
		EKeyCode::eMouseLeft,
		EKeyCode::eMouseRight,
		EKeyCode::eNull,
		EKeyCode::eMouseMiddle,
		EKeyCode::eMouse5,
		EKeyCode::eMouse6,
		EKeyCode::eNull,
		EKeyCode::eBack,
		EKeyCode::eTab,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eClear,
		EKeyCode::eReturn,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eShift,
		EKeyCode::eControl,
		EKeyCode::eMenu,
		EKeyCode::ePause,
		EKeyCode::eCapital,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eEscape,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eSpace,
		EKeyCode::ePageUp,
		EKeyCode::ePageDown,
		EKeyCode::eEnd,
		EKeyCode::eHome,
		EKeyCode::eLeft,
		EKeyCode::eUp,
		EKeyCode::eRight,
		EKeyCode::eDown,
		EKeyCode::eSelect,
		EKeyCode::ePrint,
		EKeyCode::eExecute,
		EKeyCode::eSnapShot,
		EKeyCode::eInsert,
		EKeyCode::eDelete,
		EKeyCode::eHelp,
		EKeyCode::e0,
		EKeyCode::e1,
		EKeyCode::e2,
		EKeyCode::e3,
		EKeyCode::e4,
		EKeyCode::e5,
		EKeyCode::e6,
		EKeyCode::e7,
		EKeyCode::e8,
		EKeyCode::e9,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eA,
		EKeyCode::eB,
		EKeyCode::eC,
		EKeyCode::eD,
		EKeyCode::eE,
		EKeyCode::eF,
		EKeyCode::eG,
		EKeyCode::eH,
		EKeyCode::eI,
		EKeyCode::eJ,
		EKeyCode::eL,
		EKeyCode::eM,
		EKeyCode::eN,
		EKeyCode::eO,
		EKeyCode::eP,
		EKeyCode::eQ,
		EKeyCode::eR,
		EKeyCode::eS,
		EKeyCode::eT,
		EKeyCode::eU,
		EKeyCode::eV,
		EKeyCode::eW,
		EKeyCode::eX,
		EKeyCode::eY,
		EKeyCode::eZ,
		EKeyCode::eLeftWin,
		EKeyCode::eRightWin,
		EKeyCode::eRightWin,
		EKeyCode::eApps,
		EKeyCode::eNull,
		EKeyCode::eSleep,
		EKeyCode::eNumpad0,
		EKeyCode::eNumpad1,
		EKeyCode::eNumpad2,
		EKeyCode::eNumpad3,
		EKeyCode::eNumpad4,
		EKeyCode::eNumpad5,
		EKeyCode::eNumpad6,
		EKeyCode::eNumpad7,
		EKeyCode::eNumpad8,
		EKeyCode::eNumpad9,
		EKeyCode::eMultiply,
		EKeyCode::eAdd,
		EKeyCode::eSeparator,
		EKeyCode::eSubtract,
		EKeyCode::eDecimal,
		EKeyCode::eDivide,
		EKeyCode::eF1,
		EKeyCode::eF2,
		EKeyCode::eF3,
		EKeyCode::eF4,
		EKeyCode::eF5,
		EKeyCode::eF6,
		EKeyCode::eF7,
		EKeyCode::eF8,
		EKeyCode::eF9,
		EKeyCode::eF10,
		EKeyCode::eF11,
		EKeyCode::eF12,
		EKeyCode::eF13,
		EKeyCode::eF14,
		EKeyCode::eF15,
		EKeyCode::eF16,
		EKeyCode::eF17,
		EKeyCode::eF18,
		EKeyCode::eF19,
		EKeyCode::eF20,
		EKeyCode::eF21,
		EKeyCode::eF22,
		EKeyCode::eF23,
		EKeyCode::eF24,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNumLock,
		EKeyCode::eScrollLock,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eLeftShift,
		EKeyCode::eRightShift,
		EKeyCode::eLeftControl,
		EKeyCode::eRightControl,
		EKeyCode::eLeftMenu,
		EKeyCode::eRightMenu,
		EKeyCode::eBrowserBack,
		EKeyCode::eBrowserForward,
		EKeyCode::eBrowserRefresh,
		EKeyCode::eBrowserStop,
		EKeyCode::eBrowserSearch,
		EKeyCode::eBrowserFavorites,
		EKeyCode::eBrowserHome,
		EKeyCode::eVolumnMute,
		EKeyCode::eVolumnDown,
		EKeyCode::eVolumnUp,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
		EKeyCode::eNull,
	};

#endif

	enum class EKeyState
	{
		ePressed,
		eHold,
		eRelease,
	};

	struct IInput
	{
		SG_COMMON_API static bool IsKeyPressed(EKeyCode keycode);
	};

	//! Observer design pattern, can be register by any class which inherits this class.
	struct IInputListener
	{
		virtual ~IInputListener() = default;

		//! Call when there is any input.
		//! @param (keycode) which key is changing.
		//! @param (keyState) what is its state.
		//! @return if you want to propagate this event.
		virtual bool OnInputUpdate(EKeyCode keycode, EKeyState keyState) = 0;
	};

	struct IInputSystem
	{
		virtual ~IInputSystem() = default;

		virtual void RegisterListener(IInputListener* pListener) = 0;
		virtual void MuteListener(IInputListener* pListener) = 0;
		virtual void RemoveListener(IInputListener* pListener) = 0;

		virtual void OnUpdate() = 0;
	};

}